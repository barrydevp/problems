#!/bin/bash

# exit on error
set -e

# Import
source ./setup

help() {
	cat <<EOF
  Usage:
    clean --rs|zig|py --cf|dm <problem|empty for all>

EOF
	help_options
}

clean_rust() {
	if [ ${#META[@]} -eq 0 ]; then
		# going through all the directories
		for dir in $(ls -d */); do
			if [ -f ${dir}Cargo.toml ]; then
				cd $dir
				$CARGO clean
				if [ -f "./Cargo.lock" ]; then
					rm Cargo.lock
				fi
				cd ..
			fi
		done

		return
	fi

	if [ -f "./Cargo.toml" ]; then
		$CARGO clean
		if [ -f "./Cargo.lock" ]; then
			rm Cargo.lock
		fi
	else
		echo "No code"
	fi
}

clean_zig() {
	echo "TODO"
}

clean_cpp() {
	if [ ${#META[@]} -eq 0 ]; then
		# going through all the directories
		for dir in $(ls -d */); do
			if [ -f ${dir}a.out ]; then
				rm ${dir}a.out
			fi
		done

		return
	fi

	if [ -f "./a.out" ]; then
		rm ./a.out
	else
		echo "Empty"
	fi
}

clean_c() {
	if [ ${#META[@]} -eq 0 ]; then
		# going through all the directories
		for dir in $(ls -d */); do
			if [ -f ${dir}a.out ]; then
				rm ${dir}a.out
			fi
		done

		return
	fi

	if ! [ -f ${META[0]}/a.out ]; then
		rm ${dir}a.out
	else
		echo "No code"
	fi
}

clean_python() {
	echo "TODO"
}

clean_code() {
	if [ "$HELP_FLAG" = true ]; then
		help
		exit 1
	fi

	if [ ${#META[@]} -ne 0 ]; then
		cd ${META[0]}
	fi

	case $LANGUAGE in
	$RUST_LANG)
		clean_rust $ARGS
		;;
	$ZIG_LANG)
		clean_zig $ARGS
		;;
	$CPP_LANG)
		clean_cpp $ARGS
		;;
	$C_LANG)
		clean_c $ARGS
		;;
	$PYTHON_LANG)
		clean_python $ARGS
		;;
	*)
		help
		;;
	esac
}

clean_code
